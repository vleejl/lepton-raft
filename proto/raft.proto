syntax = "proto2";
package raftpb;

// ---------------------------------------------------
// 基础数据类型
// ---------------------------------------------------

enum entry_type {
  ENTRY_NORMAL         = 0;
  ENTRY_CONF_CHANGE    = 1;  // 对应旧版配置变更
  ENTRY_CONF_CHANGE_V2 = 2;  // 对应新版配置变更
}

message entry {
  required uint64 term  = 2;
  required uint64 index = 3;
  required entry_type type = 1;
  optional bytes data = 4;
}

// ---------------------------------------------------
// 快照相关
// ---------------------------------------------------
message snapshot_metadata {
  required conf_state conf_state = 1;
  required uint64 index = 2;
  required uint64 term = 3;
}

message snapshot {
  optional bytes data = 1;
  required snapshot_metadata metadata = 2;
}

// 定义 message_type 枚举
// For description of different message types, see:
// https://pkg.go.dev/go.etcd.io/etcd/raft/v3#hdr-MessageType
enum message_type {
  // ================== 选举与角色转换消息 ==================
  MSG_HUP              = 0;  // 触发选举（场景：Follower选举超时后转为Candidate，发送角色：节点自身定时器，接收角色：Candidate）
  MSG_BEAT             = 1;  // Leader心跳触发信号（场景：Leader周期性发送心跳，发送角色：Leader定时器，接收角色：Leader自身处理）

  // ================== 客户端请求与日志复制 ==================
  MSG_PROP             = 2;  // 客户端写请求提案（场景：客户端发起写操作，发送角色：Follower转发或Leader直接接收，接收角色：Leader）
  MSG_APP              = 3;  // Leader→Follower的日志追加请求（场景：日志复制阶段，发送角色：Leader，接收角色：Follower）
  MSG_APP_RESP         = 4;  // Follower→Leader的日志追加响应（场景：日志复制完成通知，发送角色：Follower，接收角色：Leader）

  // ================== 选举投票消息 ==================
  MSG_VOTE             = 5;  // Candidate的投票请求（场景：选举阶段，发送角色：Candidate，接收角色：所有节点）
  MSG_VOTE_RESP        = 6;  // 节点→Candidate的投票响应（场景：选举结果收集，发送角色：Follower/Leader，接收角色：Candidate）

  // ================== 快照与状态同步 ==================
  MSG_SNAP             = 7;  // Leader→Follower的快照传输（场景：Follower日志严重落后，发送角色：Leader，接收角色：Follower）

  // ================== 心跳与存活检测 ==================
  MSG_HEARTBEAT        = 8;  // Leader→Follower的心跳（场景：维持领导权，发送角色：Leader，接收角色：Follower）
  MSG_HEARTBEAT_RESP   = 9;  // Follower→Leader的心跳响应（场景：心跳存活确认，发送角色：Follower，接收角色：Leader）

  // ================== 网络与系统控制 ==================
  MSG_UNREACHABLE      = 10; // 标记节点不可达（场景：网络优化，发送角色：通信层，接收角色：Leader调整重试策略）
  // ================== 快照与状态同步 ==================
  MSG_SNAP_STATUS      = 11; // Follower→Leader的快照状态报告（场景：快照传输成功/失败，发送角色：Follower，接收角色：Leader）
  // ================== 网络与系统控制 ==================
  MSG_CHECK_QUORUM     = 12; // Leader的多数派存活检查（场景：防止网络分区脑裂，发送角色：Leader定时器，接收角色：Leader自身处理）

  // ================== 领导权转移 ==================
  MSG_TRANSFER_LEADER  = 13; // 请求Leader转移权限（场景：运维操作，发送角色：客户端或节点，接收角色：Leader）
  MSG_TIMEOUT_NOW      = 14; // Leader→Follower的立即选举命令（场景：快速领导权转移，发送角色：Leader，接收角色：目标Follower）

  // ================== 只读请求处理 ==================
  MSG_READ_INDEX       = 15; // 客户端→Follower的只读请求（场景：线性一致读，发送角色：客户端/Follower转发，接收角色：Leader）
  MSG_READ_INDEX_RESP  = 16; // Leader→客户端的只读响应（场景：返回安全读索引，发送角色：Leader，接收角色：客户端）

  // ================== 预投票机制 ==================
  MSG_PRE_VOTE         = 17; // Candidate的预投票请求（场景：避免无效选举，发送角色：预Candidate，接收角色：所有节点）
  MSG_PRE_VOTE_RESP    = 18; // 节点→Candidate的预投票响应（场景：预投票结果收集，发送角色：Follower/Leader，接收角色：预Candidate）

  // ================== 存储层交互 ==================
  MSG_STORAGE_APPEND      = 19; // 请求存储层持久化日志（场景：日志落盘，发送角色：Leader/存储线程，接收角色：存储引擎）
  MSG_STORAGE_APPEND_RESP = 20; // 存储层→Raft的持久化结果（场景：日志持久化确认，发送角色：存储引擎，接收角色：Leader）
  MSG_STORAGE_APPLY       = 21; // 请求存储层提交日志到状态机（场景：状态机更新，发送角色：Leader/提交线程，接收角色：存储引擎）
  MSG_STORAGE_APPLY_RESP  = 22; // 存储层→Raft的状态机提交结果（场景：提交完成通知，发送角色：存储引擎，接收角色：Leader）

  // ================== 异常恢复 ==================
  MSG_FORGET_LEADER       = 23; // 强制Follower忘记Leader（场景：网络分区恢复，发送角色：控制台或监控系统，接收角色：Follower）
}

message message {
  optional message_type type          = 1;
  optional uint64 to                  = 2;  // 目标节点 ID
  optional uint64 from                = 3;  // 发送方节点 ID
  optional uint64 term                = 4;  // 当前任期
  // logTerm is generally used for appending Raft logs to followers. For example,
  // (type=MsgApp,index=100,logTerm=5) means the leader appends entries starting
  // at index=101, and the term of the entry at index 100 is 5.
  // (type=MsgAppResp,reject=true,index=100,logTerm=5) means follower rejects some
  // entries from its leader as it already has an entry with term 5 at index 100.
  // (type=MsgStorageAppendResp,index=100,logTerm=5) means the local node wrote
  // entries up to index=100 in stable storage, and the term of the entry at index
  // 100 was 5. This doesn't always mean that the corresponding MsgStorageAppend
  // message was the one that carried these entries, just that those entries were
  // stable at the time of processing the corresponding MsgStorageAppend.  
  optional uint64 log_term            = 5;  // 日志任期（用于一致性检查）
  optional uint64 index               = 6;  // 日志索引
  repeated entry entries              = 7;  // 日志条目列表
  optional uint64 commit              = 8;  // 已提交索引
  // (type=MsgStorageAppend,vote=5,term=10) means the local node is voting for
	// peer 5 in term 10. For MsgStorageAppends, the term, vote, and commit fields
	// will either all be set (to facilitate the construction of a HardState) if
	// any of the fields have changed or will all be unset if none of the fields
	// have changed.
  optional uint64 vote                = 13; // 当前投票目标
	// snapshot is non-nil and non-empty for MsgSnap messages and nil for all other
	// message types. However, peer nodes running older binary versions may send a
	// non-nil, empty value for the snapshot field of non-MsgSnap messages. Code
	// should be prepared to handle such messages.
  optional snapshot snapshot          = 9;  // 快照数据
  optional bool reject                = 10; // 是否拒绝请求
  optional uint64 reject_hint         = 11; // 拒绝时的日志提示
  optional bytes context              = 12; // 上下文数据
	// responses are populated by a raft node to instruct storage threads on how
	// to respond and who to respond to when the work associated with a message
	// is complete. Populated for MsgStorageAppend and MsgStorageApply messages.
  repeated message     responses   = 14;
}

// ---------------------------------------------------
// 持久化状态与配置变更
// ---------------------------------------------------
message hard_state {
  required uint64 term   = 1;
  required uint64 vote   = 2;
  required uint64 commit = 3;
}

// ConfChangeTransition specifies the behavior of a configuration change with
// respect to joint consensus.
enum conf_change_transition {
  // Automatically use the simple protocol if possible, otherwise fall back
	// to ConfChangeJointImplicit. Most applications will want to use this.
  CONF_CHANGE_TRANSITION_AUTO           = 0;
  // Use joint consensus unconditionally, and transition out of them
	// automatically (by proposing a zero configuration change).
	//
	// This option is suitable for applications that want to minimize the time
	// spent in the joint configuration and do not store the joint configuration
	// in the state machine (outside of InitialState).
  CONF_CHANGE_TRANSITION_JOINT_IMPLICIT = 1;
  // Use joint consensus and remain in the joint configuration until the
	// application proposes a no-op configuration change. This is suitable for
	// applications that want to explicitly control the transitions, for example
	// to use a custom payload (via the Context field).
  CONF_CHANGE_TRANSITION_JOINT_EXPLICIT = 2;
}

message conf_state {
  // The voters in the incoming config. (If the configuration is not joint,
	// then the outgoing config is empty).
  repeated uint64 voters           = 1;
  // The learners in the incoming config.
  repeated uint64 learners         = 2;
  // The voters in the outgoing config.
  repeated uint64 voters_outgoing  = 3;
  // The nodes that will become learners when the outgoing config is removed.
	// These nodes are necessarily currently in nodes_joint (or they would have
	// been added to the incoming config right away).
  repeated uint64 learners_next    = 4;
  // If set, the config is joint and Raft will automatically transition into
	// the final config (i.e. remove the outgoing config) when this is safe.
  required bool auto_leave         = 5;  // proto2 必须 required
}

enum conf_change_type {
  CONF_CHANGE_ADD_NODE         = 0;
  CONF_CHANGE_REMOVE_NODE      = 1;
  CONF_CHANGE_UPDATE_NODE      = 2;
  CONF_CHANGE_ADD_LEARNER_NODE = 3;
}

message conf_change {
  optional conf_change_type type = 2;
  optional uint64 node_id        = 3;  // snake_case 字段名
  optional bytes context         = 4;

	// NB: this is used only by etcd to thread through a unique identifier.
	// Ideally it should really use the Context instead. No counterpart to
	// this field exists in ConfChangeV2.
  optional uint64 id             = 1;  // etcd 专用 ID
}

// ConfChangeSingle is an individual configuration change operation. Multiple
// such operations can be carried out atomically via a ConfChangeV2.
message conf_change_single {
  required conf_change_type type = 1;
  required uint64 node_id        = 2;  // snake_case 字段名
}

// ConfChangeV2 messages initiate configuration changes. They support both the
// simple "one at a time" membership change protocol and full Joint Consensus
// allowing for arbitrary changes in membership.
//
// The supplied context is treated as an opaque payload and can be used to
// attach an action on the state machine to the application of the config change
// proposal. Note that contrary to Joint Consensus as outlined in the Raft
// paper[1], configuration changes become active when they are *applied* to the
// state machine (not when they are appended to the log).
//
// The simple protocol can be used whenever only a single change is made.
//
// Non-simple changes require the use of Joint Consensus, for which two
// configuration changes are run. The first configuration change specifies the
// desired changes and transitions the Raft group into the joint configuration,
// in which quorum requires a majority of both the pre-changes and post-changes
// configuration. Joint Consensus avoids entering fragile intermediate
// configurations that could compromise survivability. For example, without the
// use of Joint Consensus and running across three availability zones with a
// replication factor of three, it is not possible to replace a voter without
// entering an intermediate configuration that does not survive the outage of
// one availability zone.
//
// The provided ConfChangeTransition specifies how (and whether) Joint Consensus
// is used, and assigns the task of leaving the joint configuration either to
// Raft or the application. Leaving the joint configuration is accomplished by
// proposing a ConfChangeV2 with only and optionally the Context field
// populated.
//
// For details on Raft membership changes, see:
//
// [1]: https://github.com/ongardie/dissertation/blob/master/online-trim.pdf
message conf_change_v2 {
  optional conf_change_transition transition = 1;
  repeated conf_change_single changes        = 2;
  optional bytes context                     = 3;
}