syntax = "proto2";
package raftpb;

// 定义 entry_type 枚举
enum entry_type {
    entry_normal = 0;
    entry_conf_change = 1;
    entry_conf_change_v2 = 2;
}

// 定义 entry 消息
message entry {
    optional uint64 term = 2;  // 必须64位对齐以支持原子操作
    optional uint64 index = 3;  // 必须64位对齐以支持原子操作
    optional entry_type type = 1;
    optional bytes data = 4;
}

// 定义 snapshot_metadata 消息
message snapshot_metadata {
    optional conf_state conf_state = 1;
    optional uint64 index = 2;
    optional uint64 term = 3;
}

// 定义 snapshot 消息
message snapshot {
    optional bytes data = 1;
    optional snapshot_metadata metadata = 2;
}

// 定义 message_type 枚举
// For description of different message types, see:
// https://pkg.go.dev/go.etcd.io/etcd/raft/v3#hdr-MessageType
enum message_type {
    msg_hup = 0;
    msg_beat = 1;
    msg_prop = 2;
    msg_app = 3;
    msg_app_resp = 4;
    msg_vote = 5;
    msg_vote_resp = 6;
    msg_snap = 7;
    msg_heartbeat = 8;
    msg_heartbeat_resp = 9;
    msg_unreachable = 10;
    msg_snap_status = 11;
    msg_check_quorum = 12;
    msg_transfer_leader = 13;
    msg_timeout_now = 14;
    msg_read_index = 15;
    msg_read_index_resp = 16;
    msg_pre_vote = 17;
    msg_pre_vote_resp = 18;
}

// 定义 message 消息
message message {
    optional message_type type = 1;
    optional uint64 to = 2;
    optional uint64 from = 3;
    optional uint64 term = 4;
	// logTerm is generally used for appending Raft logs to followers. For example,
	// (type=MsgApp,index=100,logTerm=5) means leader appends entries starting at
	// index=101, and the term of entry at index 100 is 5.
	// (type=MsgAppResp,reject=true,index=100,logTerm=5) means follower rejects some
	// entries from its leader as it already has an entry with term 5 at index 100.    
    optional uint64 log_term = 5;
    optional uint64 index = 6;
    repeated entry entries = 7;
    optional uint64 commit = 8;
    optional snapshot snapshot = 9;
    optional bool reject = 10;
    optional uint64 reject_hint = 11;
    optional bytes context = 12;
}

// 定义 hard_state 消息
message hard_state {
    optional uint64 term = 1;
    optional uint64 vote = 2;
    optional uint64 commit = 3;
}

// 定义 conf_change_transition 枚举
// ConfChangeTransition specifies the behavior of a configuration change with
// respect to joint consensus.
enum conf_change_transition {
	// Automatically use the simple protocol if possible, otherwise fall back
	// to ConfChangeJointImplicit. Most applications will want to use this.    
    conf_change_transition_auto = 0;
	// Use joint consensus unconditionally, and transition out of them
	// automatically (by proposing a zero configuration change).
	//
	// This option is suitable for applications that want to minimize the time
	// spent in the joint configuration and do not store the joint configuration
	// in the state machine (outside of InitialState).    
    conf_change_transition_joint_implicit = 1;
	// Use joint consensus and remain in the joint configuration until the
	// application proposes a no-op configuration change. This is suitable for
	// applications that want to explicitly control the transitions, for example
	// to use a custom payload (via the Context field).    
    conf_change_transition_joint_explicit = 2;
}

// 定义 conf_state 消息
message conf_state {
	// The voters in the incoming config. (If the configuration is not joint,
	// then the outgoing config is empty).    
    repeated uint64 voters = 1;
	// The learners in the incoming config.
    repeated uint64 learners = 2;
	// The voters in the outgoing config.    
    repeated uint64 voters_outgoing = 3;
	// The nodes that will become learners when the outgoing config is removed.
	// These nodes are necessarily currently in nodes_joint (or they would have
	// been added to the incoming config right away).    
    repeated uint64 learners_next = 4;
    // If set, the config is joint and Raft will automatically transition into
	// the final config (i.e. remove the outgoing config) when this is safe.
    optional bool auto_leave = 5;
}

// 定义 conf_change_type 枚举
enum conf_change_type {
    conf_change_add_node = 0;
    conf_change_remove_node = 1;
    conf_change_update_node = 2;
    conf_change_add_learner_node = 3;
}

// 定义 conf_change 消息
message conf_change {
    optional conf_change_type type = 2;
    optional uint64 node_id = 3;
    optional bytes context = 4;

    // NB: this is used only by etcd to thread through a unique identifier.
	// Ideally it should really use the Context instead. No counterpart to
	// this field exists in ConfChangeV2.
    optional uint64 id = 1;
}

// 定义 conf_change_single 消息
// ConfChangeSingle is an individual configuration change operation. Multiple
// such operations can be carried out atomically via a ConfChangeV2.
message conf_change_single {
    optional conf_change_type type = 1;
    optional uint64 node_id = 2;
}

// 定义 conf_change_v2 消息
// ConfChangeV2 messages initiate configuration changes. They support both the
// simple "one at a time" membership change protocol and full Joint Consensus
// allowing for arbitrary changes in membership.
//
// The supplied context is treated as an opaque payload and can be used to
// attach an action on the state machine to the application of the config change
// proposal. Note that contrary to Joint Consensus as outlined in the Raft
// paper[1], configuration changes become active when they are *applied* to the
// state machine (not when they are appended to the log).
//
// The simple protocol can be used whenever only a single change is made.
//
// Non-simple changes require the use of Joint Consensus, for which two
// configuration changes are run. The first configuration change specifies the
// desired changes and transitions the Raft group into the joint configuration,
// in which quorum requires a majority of both the pre-changes and post-changes
// configuration. Joint Consensus avoids entering fragile intermediate
// configurations that could compromise survivability. For example, without the
// use of Joint Consensus and running across three availability zones with a
// replication factor of three, it is not possible to replace a voter without
// entering an intermediate configuration that does not survive the outage of
// one availability zone.
//
// The provided ConfChangeTransition specifies how (and whether) Joint Consensus
// is used, and assigns the task of leaving the joint configuration either to
// Raft or the application. Leaving the joint configuration is accomplished by
// proposing a ConfChangeV2 with only and optionally the Context field
// populated.
//
// For details on Raft membership changes, see:
//
// [1]: https://github.com/ongardie/dissertation/blob/master/online-trim.pdf
message conf_change_v2 {
    optional conf_change_transition transition = 1;
    repeated conf_change_single changes = 2;
    optional bytes context = 3;
}
